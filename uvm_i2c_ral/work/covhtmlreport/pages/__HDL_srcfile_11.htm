
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-w>module</q-w> data_path_i2c_to_core    # ( <q-w>parameter</q-w>     DATA_SIZE   =   8 , 
<a name="2"><q-n>     2  </q-n></a>                                    <q-w>parameter</q-w>     ADDR_SIZE   =   8 )    
<a name="3"><q-n>     3  </q-n></a>(
<a name="4"><q-n>     4  </q-n></a>    <q-w>input</q-w>   [DATA_SIZE - 1 : 0]         data_i              ,   <q-m>// data from fifo buffer</q-m>
<a name="5"><q-n>     5  </q-n></a>    <q-w>input</q-w>   [ADDR_SIZE - 1 : 0]         addr_i              ,   <q-m>// address of slave</q-m>
<a name="6"><q-n>     6  </q-n></a>    <q-w>input</q-w>   [3 : 0]                     count_bit_i         ,   <q-m>// sda input</q-m>
<a name="7"><q-n>     7  </q-n></a>    <q-w>input</q-w>                               i2c_core_clk_i      ,   <q-m>// i2c core clock</q-m>
<a name="8"><q-n>     8  </q-n></a>    <q-w>input</q-w>                               reset_ni            ,   <q-m>// reset negetive signal from MCU</q-m>
<a name="9"><q-n>     9  </q-n></a>    <q-w>input</q-w>                               i2c_sda_i           ,   <q-m>// sda line</q-m>
<a name="10"><q-n>     10  </q-n></a>
<a name="11"><q-n>     11  </q-n></a>    <q-w>input</q-w>                               sda_low_en_i        ,   <q-m>// control sda signal from FSM, when 1 sda = 0</q-m>
<a name="12"><q-n>     12  </q-n></a>    <q-w>input</q-w>                               write_data_en_i     ,   <q-m>// enable write data signal from FSM</q-m>
<a name="13"><q-n>     13  </q-n></a>    <q-w>input</q-w>                               write_addr_en_i     ,   <q-m>// enable write slave's signal to sda </q-m>
<a name="14"><q-n>     14  </q-n></a>    <q-w>input</q-w>                               receive_data_en_i   ,   <q-m>// enable receive data from sda</q-m>
<a name="15"><q-n>     15  </q-n></a>
<a name="16"><q-n>     16  </q-n></a>    <q-w>output</q-w>  [DATA_SIZE - 1 : 0]         data_from_sda_o     ,   <q-m>// data from sda to write to FIFO buffer</q-m>
<a name="17"><q-n>     17  </q-n></a>    <q-w>output</q-w>                              i2c_sda_o              <q-m>// i2c sda output   </q-m>
<a name="18"><q-n>     18  </q-n></a>                     
<a name="19"><q-n>     19  </q-n></a>);
<a name="20"><q-n>     20  </q-n></a>    
<a name="21"><q-n>     21  </q-n></a>    <q-w>reg</q-w>     	[DATA_SIZE - 1 : 0]         data_from_sda       		;
<a name="22"><q-n>     22  </q-n></a>	<q-w>reg</q-w>										i2c_sda			 			;
<a name="23"><q-n>     23  </q-n></a>
<a name="24"><q-n>     24  </q-n></a>	<q-w>assign</q-w>		i2c_sda_o			=		i2c_sda							;
<a name="25"><q-n>     25  </q-n></a>    <q-w>assign</q-w>      data_from_sda_o	   	=   	data_from_sda       			;
<a name="26"><q-n>     26  </q-n></a>
<a name="27"><q-n>     27  </q-n></a>
<a name="28"><q-n>     28  </q-n></a>    <q-m>// read-write data to sda</q-m>
<a name="29"><q-n>     29  </q-n></a>    <q-w>always</q-w> @(<q-a>posedge</q-w>    i2c_core_clk_i,     <q-a>negedge</q-w>     reset_ni  ) <q-w>begin</q-w>
<a name="30"><q-n>     30  </q-n></a>
<a name="31"><q-n>     31  </q-n></a>        <q-w>if</q-w> (~reset_ni) <q-w>begin</q-w>
<a name="32"><q-n>     32  </q-n></a>            data_from_sda   &lt;=      0                           ;
<a name="33"><q-n>     33  </q-n></a>            i2c_sda         &lt;=      0                           ;
<a name="34"><q-n>     34  </q-n></a>        <q-w>end</q-w>
<a name="35"><q-n>     35  </q-n></a>
<a name="36"><q-n>     36  </q-n></a>        <q-w>else</q-w> <q-w>begin</q-w>
<a name="37"><q-n>     37  </q-n></a>
<a name="38"><q-n>     38  </q-n></a>            <q-w>if</q-w> (sda_low_en_i) <q-w>begin</q-w>
<a name="39"><q-n>     39  </q-n></a>                i2c_sda	       &lt;=       0                               ;
<a name="40"><q-n>     40  </q-n></a>            <q-w>end</q-w> 
<a name="41"><q-n>     41  </q-n></a>
<a name="42"><q-n>     42  </q-n></a>            <q-w>else</q-w> <q-w>if</q-w> (write_addr_en_i) <q-w>begin</q-w>
<a name="43"><q-n>     43  </q-n></a>                i2c_sda	       &lt;=       addr_i[count_bit_i]             ;
<a name="44"><q-n>     44  </q-n></a>            <q-w>end</q-w>
<a name="45"><q-n>     45  </q-n></a>
<a name="46"><q-n>     46  </q-n></a>            <q-w>else</q-w> <q-w>if</q-w> (receive_data_en_i) <q-w>begin</q-w>
<a name="47"><q-n>     47  </q-n></a>                data_from_sda[count_bit_i]   &lt;=       i2c_sda_i       ;  
<a name="48"><q-n>     48  </q-n></a>            <q-w>end</q-w>
<a name="49"><q-n>     49  </q-n></a>
<a name="50"><q-n>     50  </q-n></a>            <q-w>else</q-w> <q-w>if</q-w> (write_data_en_i) <q-w>begin</q-w>
<a name="51"><q-n>     51  </q-n></a>                i2c_sda	       &lt;=      data_i[count_bit_i]              ;
<a name="52"><q-n>     52  </q-n></a>            <q-w>end</q-w>
<a name="53"><q-n>     53  </q-n></a>
<a name="54"><q-n>     54  </q-n></a>            <q-w>else</q-w> <q-w>begin</q-w>
<a name="55"><q-n>     55  </q-n></a>                i2c_sda	       &lt;=      i2c_sda                                ;
<a name="56"><q-n>     56  </q-n></a>            <q-w>end</q-w>
<a name="57"><q-n>     57  </q-n></a>
<a name="58"><q-n>     58  </q-n></a>        <q-w>end</q-w>
<a name="59"><q-n>     59  </q-n></a>
<a name="60"><q-n>     60  </q-n></a>    <q-w>end</q-w>     
<a name="61"><q-n>     61  </q-n></a>
<a name="62"><q-n>     62  </q-n></a>
<a name="63"><q-n>     63  </q-n></a><q-w>endmodule</q-w>
</pre>
</tt>

  
</body>
</html>
