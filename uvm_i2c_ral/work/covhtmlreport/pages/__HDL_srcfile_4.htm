
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>// read pointer and empty logic</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>//The n-bit pointer ( rptr ) is passed to the write clock domain through the sync_r2w module. </q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>//The (n-1)-bit pointer ( raddr ) is used to address the FIFO buffer.</q-m>
<a name="4"><q-n>     4  </q-n></a>
<a name="5"><q-n>     5  </q-n></a><q-w>module</q-w> rptr_empty # (<q-w>parameter</q-w>  ADDRSIZE = 4 )
<a name="6"><q-n>     6  </q-n></a>(
<a name="7"><q-n>     7  </q-n></a>    <q-w>input</q-w>       	[ADDRSIZE : 0]      rq2_wptr_i  , <q-m>// The pointer synchronized from write_pointer to read-domain</q-m>
<a name="8"><q-n>     8  </q-n></a>    <q-w>input</q-w>                          		rinc_i      , <q-m>// Read increase how many memory cells</q-m>
<a name="9"><q-n>     9  </q-n></a>    <q-w>input</q-w>                          	 	rclk_i      , <q-m>// The clock of read-domain</q-m>
<a name="10"><q-n>     10  </q-n></a>    <q-w>input</q-w>                           	rrst_ni     , <q-m>// The negative reset signal of read-domain</q-m>
<a name="11"><q-n>     11  </q-n></a>    <q-w>output</q-w>                       	    rempty_o    , <q-m>// Output is the buffer is empty, can not read</q-m>
<a name="12"><q-n>     12  </q-n></a>    <q-w>output</q-w>  	 	[ADDRSIZE - 1 : 0]  raddr_o     , <q-m>// Address used to read data from FIFO memory</q-m>
<a name="13"><q-n>     13  </q-n></a>    <q-w>output</q-w>	    	[ADDRSIZE : 0]      rptr_o      , <q-m>// The gray-pointer of read-domain used for synchronization to write-domain</q-m>
<a name="14"><q-n>     14  </q-n></a>	<q-w>output</q-w>							    r_almost_empty_o	<q-m>// Almost empty</q-m>
<a name="15"><q-n>     15  </q-n></a>      
<a name="16"><q-n>     16  </q-n></a>);
<a name="17"><q-n>     17  </q-n></a>
<a name="18"><q-n>     18  </q-n></a>    <q-m>// Declar reg of output</q-m>
<a name="19"><q-n>     19  </q-n></a>    <q-w>reg</q-w>                     	rempty            ;
<a name="20"><q-n>     20  </q-n></a>    <q-w>reg</q-w> 	[ADDRSIZE - 1 : 0]  raddr             ;
<a name="21"><q-n>     21  </q-n></a>    <q-w>reg</q-w>  	[ADDRSIZE : 0]      rptr              ;
<a name="22"><q-n>     22  </q-n></a>    <q-w>reg</q-w>							r_almost_empty    ;
<a name="23"><q-n>     23  </q-n></a>
<a name="24"><q-n>     24  </q-n></a>    <q-m>// Declar pointer</q-m>
<a name="25"><q-n>     25  </q-n></a>    <q-w>reg</q-w>     [ADDRSIZE : 0]  rbin        	            ; <q-m>// binary read-pointer </q-m>
<a name="26"><q-n>     26  </q-n></a>    <q-w>wire</q-w>    [ADDRSIZE : 0]  rbinnext    	            ; <q-m>// binary read-pointer where the next address is to be read after increase</q-m>
<a name="27"><q-n>     27  </q-n></a>    <q-w>wire</q-w>    [ADDRSIZE : 0]  rgraynext   	            ; <q-m>// gray   read-pointer where the next address is to be read after increase</q-m>
<a name="28"><q-n>     28  </q-n></a>	<q-w>wire</q-w>    [ADDRSIZE : 0]  rgraynextp1   	            ; <q-m>// gray   read-pointer transfered from (rbinnext + 1)</q-m>
<a name="29"><q-n>     29  </q-n></a>    
<a name="30"><q-n>     30  </q-n></a>    <q-m>// Connect reg to ouput</q-m>
<a name="31"><q-n>     31  </q-n></a>    <q-w>assign</q-w>      rempty_o            =   rempty          ;
<a name="32"><q-n>     32  </q-n></a>    <q-w>assign</q-w>      raddr_o             =   raddr           ;
<a name="33"><q-n>     33  </q-n></a>    <q-w>assign</q-w>      rptr_o              =   rptr            ;
<a name="34"><q-n>     34  </q-n></a>    <q-w>assign</q-w>      r_almost_empty_o    =   r_almost_empty  ;
<a name="35"><q-n>     35  </q-n></a>
<a name="36"><q-n>     36  </q-n></a>    <q-m>// Gray pointer and binary pointer</q-m>
<a name="37"><q-n>     37  </q-n></a>    <q-w>always</q-w> @ (<q-a>posedge</q-w> rclk_i,   <q-a>negedge</q-w> rrst_ni)
<a name="38"><q-n>     38  </q-n></a>    <q-w>begin</q-w>
<a name="39"><q-n>     39  </q-n></a>    
<a name="40"><q-n>     40  </q-n></a>        <q-w>if</q-w> (~rrst_ni)
<a name="41"><q-n>     41  </q-n></a>            {rptr, rbin}    &lt;=  0                         ;
<a name="42"><q-n>     42  </q-n></a>        <q-w>else</q-w>
<a name="43"><q-n>     43  </q-n></a>            {rptr, rbin}    &lt;=    {rgraynext, rbinnext}   ;
<a name="44"><q-n>     44  </q-n></a>    
<a name="45"><q-n>     45  </q-n></a>    <q-w>end</q-w>
<a name="46"><q-n>     46  </q-n></a>    
<a name="47"><q-n>     47  </q-n></a>    <q-m>// Memory read-address pointer</q-m>
<a name="48"><q-n>     48  </q-n></a>	<q-w>always</q-w>	@ (*)
<a name="49"><q-n>     49  </q-n></a>	<q-w>begin</q-w>
<a name="50"><q-n>     50  </q-n></a>
<a name="51"><q-n>     51  </q-n></a>		raddr     =   rbin[ADDRSIZE - 1 : 0]      ;
<a name="52"><q-n>     52  </q-n></a>
<a name="53"><q-n>     53  </q-n></a>	<q-w>end</q-w>
<a name="54"><q-n>     54  </q-n></a>    
<a name="55"><q-n>     55  </q-n></a>    <q-w>assign</q-w>  rbinnext    =   rbin + (rinc_i &amp; ~rempty) ; <q-m>// if buffer is empty, can not increase address</q-m>
<a name="56"><q-n>     56  </q-n></a>
<a name="57"><q-n>     57  </q-n></a>    <q-m>// Convert from binary to gray</q-m>
<a name="58"><q-n>     58  </q-n></a>    <q-w>assign</q-w>  rgraynext   =   (rbinnext &gt;&gt; 1) ^ rbinnext  ;
<a name="59"><q-n>     59  </q-n></a>	<q-w>assign</q-w>	rgraynextp1	=	((rbinnext + 1) &gt;&gt; 1) ^ (rbinnext + 1)  ;
<a name="60"><q-n>     60  </q-n></a>    
<a name="61"><q-n>     61  </q-n></a>    <q-m>// FIFO empty when the next rptr == synchronized write-pointer or reset</q-m>
<a name="62"><q-n>     62  </q-n></a>    <q-w>assign</q-w>  rempty_val  		=   (rgraynext   == rq2_wptr_i)   ;
<a name="63"><q-n>     63  </q-n></a>	<q-w>assign</q-w>	r_almost_empty_val	=	(rgraynextp1 == rq2_wptr_i)   ;
<a name="64"><q-n>     64  </q-n></a>
<a name="65"><q-n>     65  </q-n></a>    <q-w>always</q-w>  @ (<q-a>posedge</q-w> rclk_i,  <q-a>negedge</q-w> rrst_ni)
<a name="66"><q-n>     66  </q-n></a>    <q-w>begin</q-w>
<a name="67"><q-n>     67  </q-n></a>    
<a name="68"><q-n>     68  </q-n></a>        <q-w>if</q-w> (~rrst_ni)
<a name="69"><q-n>     69  </q-n></a>			<q-w>begin</q-w>
<a name="70"><q-n>     70  </q-n></a>            	rempty    		    &lt;=  1'b1                ;
<a name="71"><q-n>     71  </q-n></a>				r_almost_empty	    &lt;=	1'b1		        ;
<a name="72"><q-n>     72  </q-n></a>			<q-w>end</q-w>
<a name="73"><q-n>     73  </q-n></a>
<a name="74"><q-n>     74  </q-n></a>        <q-w>else</q-w>
<a name="75"><q-n>     75  </q-n></a>			<q-w>begin</q-w>
<a name="76"><q-n>     76  </q-n></a>            	rempty    		    &lt;=  rempty_val  		;
<a name="77"><q-n>     77  </q-n></a>				r_almost_empty	    &lt;=	r_almost_empty_val	;
<a name="78"><q-n>     78  </q-n></a>			<q-w>end</q-w>
<a name="79"><q-n>     79  </q-n></a>    
<a name="80"><q-n>     80  </q-n></a>    <q-w>end</q-w>
<a name="81"><q-n>     81  </q-n></a>
<a name="82"><q-n>     82  </q-n></a><q-w>endmodule</q-w>
<a name="83"><q-n>     83  </q-n></a>
</pre>
</tt>

  
</body>
</html>
