
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-w>module</q-w> i2c_top      #(<q-w>parameter</q-w>     DATA_SIZE   =   8   ,
<a name="2"><q-n>     2  </q-n></a>                      <q-w>parameter</q-w>     ADDR_SIZE   =   8   )
<a name="3"><q-n>     3  </q-n></a>(
<a name="4"><q-n>     4  </q-n></a>    <q-w>input</q-w>                               i2c_core_clk_i      ,   <q-m>// clock core of i2c</q-m>
<a name="5"><q-n>     5  </q-n></a>    <q-w>input</q-w>                               pclk_i              ,   <q-m>//  APB clock</q-m>
<a name="6"><q-n>     6  </q-n></a>    <q-w>input</q-w>                               preset_ni           ,   <q-m>//  reset signal is active-LOW</q-m>
<a name="7"><q-n>     7  </q-n></a>    <q-w>input</q-w>   [ADDR_SIZE - 1 : 0]         paddr_i             ,   <q-m>//  address of APB slave and register map</q-m>
<a name="8"><q-n>     8  </q-n></a>    <q-w>input</q-w>                               pwrite_i            ,   <q-m>//  HIGH is write, LOW is read</q-m>
<a name="9"><q-n>     9  </q-n></a>    <q-w>input</q-w>                               psel_i              ,   <q-m>//  select slave interface</q-m>
<a name="10"><q-n>     10  </q-n></a>    <q-w>input</q-w>                               penable_i           ,   <q-m>//  Enable. PENABLE indicates the second and subsequent cycles of an APB transfer.</q-m>
<a name="11"><q-n>     11  </q-n></a>    <q-w>input</q-w>   [DATA_SIZE - 1 : 0]         pwdata_i            ,   <q-m>//  data write</q-m>
<a name="12"><q-n>     12  </q-n></a>
<a name="13"><q-n>     13  </q-n></a>    <q-w>output</q-w>  [DATA_SIZE - 1 : 0]         prdata_o            ,   <q-m>//  data read</q-m>
<a name="14"><q-n>     14  </q-n></a>    <q-w>output</q-w>                              pready_o            ,   <q-m>//  ready to receive data</q-m>
<a name="15"><q-n>     15  </q-n></a>    <q-w>output</q-w>				                reset	            ,
<a name="16"><q-n>     16  </q-n></a>    <q-w>inout</q-w>                               sda                 ,
<a name="17"><q-n>     17  </q-n></a>    <q-w>inout</q-w>                               scl             
<a name="18"><q-n>     18  </q-n></a>);
<a name="19"><q-n>     19  </q-n></a>
<a name="20"><q-n>     20  </q-n></a>
<a name="21"><q-n>     21  </q-n></a> 
<a name="22"><q-n>     22  </q-n></a>    <q-m>// Decalar netlist</q-m>
<a name="23"><q-n>     23  </q-n></a>    <q-w>wire</q-w>                        i2c_sda_en                      ;
<a name="24"><q-n>     24  </q-n></a>    <q-w>wire</q-w>                        i2c_scl_en                      ;
<a name="25"><q-n>     25  </q-n></a>    <q-w>wire</q-w>                        i2c_sda                         ;
<a name="26"><q-n>     26  </q-n></a>    <q-w>wire</q-w>                        i2c_scl                         ;
<a name="27"><q-n>     27  </q-n></a>
<a name="28"><q-n>     28  </q-n></a>    <q-w>wire</q-w>                        clk_en                          ;
<a name="29"><q-n>     29  </q-n></a>    <q-w>wire</q-w>                        reset_n                         ;
<a name="30"><q-n>     30  </q-n></a>    <q-w>wire</q-w>                        enable                          ;
<a name="31"><q-n>     31  </q-n></a>    <q-w>wire</q-w>                        repeat_start                    ;
<a name="32"><q-n>     32  </q-n></a>    <q-w>wire</q-w>                        rw                              ;
<a name="33"><q-n>     33  </q-n></a>	<q-w>wire</q-w>						w_fifo_en						;
<a name="34"><q-n>     34  </q-n></a>	<q-w>wire</q-w>						r_fifo_en_o						;
<a name="35"><q-n>     35  </q-n></a>    <q-w>wire</q-w>                        sda_low_en                      ;
<a name="36"><q-n>     36  </q-n></a>    <q-w>wire</q-w>                        write_data_en                   ;
<a name="37"><q-n>     37  </q-n></a>    <q-w>wire</q-w>                        write_addr_en                   ;
<a name="38"><q-n>     38  </q-n></a>    <q-w>wire</q-w>                        receive_data_en                 ;
<a name="39"><q-n>     39  </q-n></a>    <q-w>wire</q-w>	[3:0]               count_bit                       ;
<a name="40"><q-n>     40  </q-n></a>
<a name="41"><q-n>     41  </q-n></a>    <q-w>wire</q-w>  [DATA_SIZE - 1 : 0]   data                            ;
<a name="42"><q-n>     42  </q-n></a>    <q-w>wire</q-w>  [DATA_SIZE - 1 : 0]   data_from_sda                   ;
<a name="43"><q-n>     43  </q-n></a>    <q-w>wire</q-w>  [DATA_SIZE - 1 : 0]   data_to_sda                     ;
<a name="44"><q-n>     44  </q-n></a>    <q-w>wire</q-w>  [DATA_SIZE - 1 : 0]   data_to_apb                     ;
<a name="45"><q-n>     45  </q-n></a>    <q-w>wire</q-w>  [7:0]                 to_status_reg                   ;
<a name="46"><q-n>     46  </q-n></a>    <q-w>wire</q-w>  [7:0]                 data_from_apb                   ;
<a name="47"><q-n>     47  </q-n></a>    <q-w>wire</q-w>  [7:0]                 slave_address               	;
<a name="48"><q-n>     48  </q-n></a>    <q-w>wire</q-w>  [7:0]                 command                         ;
<a name="49"><q-n>     49  </q-n></a>	<q-w>wire</q-w>  [7:0]					status							;
<a name="50"><q-n>     50  </q-n></a>    <q-w>wire</q-w>  [7:0]                 prescale                        ;
<a name="51"><q-n>     51  </q-n></a>
<a name="52"><q-n>     52  </q-n></a>    <q-w>wire</q-w>                        start_done                      ;
<a name="53"><q-n>     53  </q-n></a>    <q-w>wire</q-w>                        reset_done                      ;
<a name="54"><q-n>     54  </q-n></a>
<a name="55"><q-n>     55  </q-n></a>    <q-w>assign</q-w>      sda     =   i2c_sda_en ? i2c_sda : 1'bz         ;
<a name="56"><q-n>     56  </q-n></a>    <q-w>assign</q-w>      scl     =   i2c_scl_en ? i2c_scl : 1            ;
<a name="57"><q-n>     57  </q-n></a>    <q-w>assign</q-w> 	    reset 	=   reset_n                             ;
<a name="58"><q-n>     58  </q-n></a>
<a name="59"><q-n>     59  </q-n></a>    <q-t>pullup</q-w> (sda)    ;
<a name="60"><q-n>     60  </q-n></a>    <q-m>//pullup (scl)    ;</q-m>
<a name="61"><q-n>     61  </q-n></a>
<a name="62"><q-n>     62  </q-n></a>    <q-m>// get command bit</q-m>
<a name="63"><q-n>     63  </q-n></a>    <q-w>assign</q-w>      enable          =       command[6]            ;
<a name="64"><q-n>     64  </q-n></a>    <q-w>assign</q-w>      reset_n         =       command[7]            ;
<a name="65"><q-n>     65  </q-n></a>    <q-w>assign</q-w>      repeat_start    =       command[5]            ;
<a name="66"><q-n>     66  </q-n></a>    <q-w>assign</q-w>      rw              =       slave_address[0]      ;
<a name="67"><q-n>     67  </q-n></a>
<a name="68"><q-n>     68  </q-n></a>    <q-m>// get tx-empty, rx-full from status reg</q-m>
<a name="69"><q-n>     69  </q-n></a>    <q-w>assign</q-w>      tx_empty        =       status[7]   ;	
<a name="70"><q-n>     70  </q-n></a>    <q-w>assign</q-w>      rx_full         =       status[2]   ;
<a name="71"><q-n>     71  </q-n></a>
<a name="72"><q-n>     72  </q-n></a>    <q-m>// push data to i2c line</q-m>
<a name="73"><q-n>     73  </q-n></a>    <q-w>assign</q-w>      i2c_sda_o       =       i2c_sda     ;
<a name="74"><q-n>     74  </q-n></a>    <q-w>assign</q-w>      i2c_scl_o       =       i2c_scl     ;
<a name="75"><q-n>     75  </q-n></a>
<a name="76"><q-n>     76  </q-n></a>    <q-m>// dut</q-m>
<a name="77"><q-n>     77  </q-n></a>    clock_generator                              clock_generator 
<a name="78"><q-n>     78  </q-n></a>    (
<a name="79"><q-n>     79  </q-n></a>		.i2c_core_clk_i	    (i2c_core_clk_i     )     ,   <q-m>// i2c core clock</q-m>
<a name="80"><q-n>     80  </q-n></a>    	.clk_en_i		    (clk_en		        )     ,   <q-m>// enbale clock to scl</q-m>
<a name="81"><q-n>     81  </q-n></a>		.reset_ni		    (reset_n		    )	  ,
<a name="82"><q-n>     82  </q-n></a>        .prescale_i         (prescale           )     ,
<a name="83"><q-n>     83  </q-n></a>    	.i2c_scl_o 		    (i2c_scl		    )         <q-m>// scl output</q-m>
<a name="84"><q-n>     84  </q-n></a>    );
<a name="85"><q-n>     85  </q-n></a>
<a name="86"><q-n>     86  </q-n></a>
<a name="87"><q-n>     87  </q-n></a>    i2c_master_fsm                                  i2c_master_fsm
<a name="88"><q-n>     88  </q-n></a>    (
<a name="89"><q-n>     89  </q-n></a>        .enable_i           (enable             )      ,   <q-m>// enable signal from MCU</q-m>
<a name="90"><q-n>     90  </q-n></a>    	.reset_ni           (reset_n            )      ,   <q-m>// reset negative signal from MCU</q-m>
<a name="91"><q-n>     91  </q-n></a>    	.repeat_start_i     (repeat_start       )      ,   <q-m>// repeat start signal from MCU</q-m>
<a name="92"><q-n>     92  </q-n></a>    	.rw_i               (rw                 )      ,   <q-m>// bit 1 is read - 0 is write</q-m>
<a name="93"><q-n>     93  </q-n></a>    	.full_i             (rx_full            )      ,   <q-m>// FIFO buffer is full</q-m>
<a name="94"><q-n>     94  </q-n></a>    	.empty_i            (tx_empty           )      ,   <q-m>// FIFO buffer is empty</q-m>
<a name="95"><q-n>     95  </q-n></a>    	.i2c_core_clk_i     (i2c_core_clk_i     )      ,   <q-m>// i2c core clock</q-m>
<a name="96"><q-n>     96  </q-n></a>    	.i2c_sda_i          (sda                )      ,   <q-m>// i2c sda feedback to FSM</q-m>
<a name="97"><q-n>     97  </q-n></a>    	.i2c_scl_i          (scl                )      ,   <q-m>// i2c scl feedback to FSM</q-m>
<a name="98"><q-n>     98  </q-n></a>
<a name="99"><q-n>     99  </q-n></a>		.w_fifo_en_o		(w_fifo_en			)		,
<a name="100"><q-n>     100  </q-n></a>		.r_fifo_en_o		(r_fifo_en			)		,
<a name="101"><q-n>     101  </q-n></a>
<a name="102"><q-n>     102  </q-n></a>    	.sda_low_en_o       (sda_low_en         )      ,   <q-m>// when = 1 enable sda down 0</q-m>
<a name="103"><q-n>     103  </q-n></a>    	.clk_en_o           (clk_en             )      ,   <q-m>// enbale to generator clk</q-m>
<a name="104"><q-n>     104  </q-n></a>    	.write_data_en_o    (write_data_en      )      ,   <q-m>// enable write data on sda</q-m>
<a name="105"><q-n>     105  </q-n></a>    	.write_addr_en_o    (write_addr_en      )      ,   <q-m>// enable write address of slave on sda</q-m>
<a name="106"><q-n>     106  </q-n></a>    	.receive_data_en_o  (receive_data_en    )      ,   <q-m>// enable receive data from sda</q-m>
<a name="107"><q-n>     107  </q-n></a>    	.count_bit_o        (count_bit          )      ,   <q-m>// count bit data from 7 down to 0</q-m>
<a name="108"><q-n>     108  </q-n></a>    	.i2c_sda_en_o       (i2c_sda_en         )      ,   <q-m>// allow impact to sda</q-m>
<a name="109"><q-n>     109  </q-n></a>    	.i2c_scl_en_o       (i2c_scl_en         )      ,   <q-m>// allow impact to scl</q-m>
<a name="110"><q-n>     110  </q-n></a>        .start_done_o       (start_done         )      ,
<a name="111"><q-n>     111  </q-n></a>        .reset_done_o       (reset_done         )
<a name="112"><q-n>     112  </q-n></a>    );
<a name="113"><q-n>     113  </q-n></a>
<a name="114"><q-n>     114  </q-n></a>
<a name="115"><q-n>     115  </q-n></a>    data_path_i2c_to_core   # (DATA_SIZE    , ADDR_SIZE    )                           
<a name="116"><q-n>     116  </q-n></a>    data_path_i2c_to_core (
<a name="117"><q-n>     117  </q-n></a>        .data_i               (data_to_sda      )         ,   <q-m>// data from fifo buffer</q-m>
<a name="118"><q-n>     118  </q-n></a>        .addr_i               (slave_address    )         ,   <q-m>// address of slave</q-m>
<a name="119"><q-n>     119  </q-n></a>        .count_bit_i          (count_bit        )         ,   <q-m>// sda input</q-m>
<a name="120"><q-n>     120  </q-n></a>        .i2c_core_clk_i       (i2c_core_clk_i   )         ,
<a name="121"><q-n>     121  </q-n></a>        .reset_ni             (reset_n          )         ,
<a name="122"><q-n>     122  </q-n></a>        .i2c_sda_i            (sda              )         ,   <q-m>// sda line</q-m>
<a name="123"><q-n>     123  </q-n></a>
<a name="124"><q-n>     124  </q-n></a>        .sda_low_en_i         (sda_low_en       )         ,   <q-m>// control sda signal from FSM, when 1 sda = 0</q-m>
<a name="125"><q-n>     125  </q-n></a>        .write_data_en_i      (write_data_en    )         ,   <q-m>// enable write data signal from FSM</q-m>
<a name="126"><q-n>     126  </q-n></a>        .write_addr_en_i      (write_addr_en    )         ,   <q-m>// enable write slave's signal to sda </q-m>
<a name="127"><q-n>     127  </q-n></a>        .receive_data_en_i    (receive_data_en  )         ,   <q-m>// enable receive data from sda</q-m>
<a name="128"><q-n>     128  </q-n></a>
<a name="129"><q-n>     129  </q-n></a>        .data_from_sda_o      (data_from_sda    )         ,   <q-m>// data from sda to write to FIFO buffer</q-m>
<a name="130"><q-n>     130  </q-n></a>        .i2c_sda_o            (i2c_sda          )            <q-m>// i2c sda output   </q-m>
<a name="131"><q-n>     131  </q-n></a>    );
<a name="132"><q-n>     132  </q-n></a>
<a name="133"><q-n>     133  </q-n></a>
<a name="134"><q-n>     134  </q-n></a>    data_fifo_mem # (DATA_SIZE, ADDR_SIZE)      data_fifo_mem (
<a name="135"><q-n>     135  </q-n></a>        .pclk_i             (pclk_i         )   ,   <q-m>// APB clock</q-m>
<a name="136"><q-n>     136  </q-n></a>        .i2c_core_clk_i     (i2c_core_clk_i )   ,   <q-m>// i2c clock core</q-m>
<a name="137"><q-n>     137  </q-n></a>        .command_i          (command        )   ,   <q-m>// command from MCU include: enable, repeat_start, reset, r/w, winc, rinc</q-m>
<a name="138"><q-n>     138  </q-n></a>        .data_from_apb_i    (data_from_apb  )   ,   <q-m>// data from apb transfer to TX-FIFO</q-m>
<a name="139"><q-n>     139  </q-n></a>        .data_from_sda_i    (data_from_sda  )   ,   <q-m>// data from sda transfer to RX-FIFO</q-m>
<a name="140"><q-n>     140  </q-n></a>        .r_tx_fifo_en_i     (r_fifo_en      )   ,   <q-m>// enable read data from TX-FIFO</q-m>
<a name="141"><q-n>     141  </q-n></a>        .w_rx_fifo_en_i     (w_fifo_en      )   ,   <q-m>// enable write data to RX-FIFO</q-m>
<a name="142"><q-n>     142  </q-n></a>
<a name="143"><q-n>     143  </q-n></a>        .data_to_apb_o      (data_to_apb    )   ,   <q-m>// data receive from sda, which transfer to apb interface</q-m>
<a name="144"><q-n>     144  </q-n></a>        .data_to_sda_o      (data_to_sda    )   ,   <q-m>// data which receive from apb and then transfer to data_path</q-m>
<a name="145"><q-n>     145  </q-n></a>        .status_o           (status		    )       <q-m>// full, empty status of TX and RX memory</q-m>
<a name="146"><q-n>     146  </q-n></a>    );
<a name="147"><q-n>     147  </q-n></a>
<a name="148"><q-n>     148  </q-n></a>
<a name="149"><q-n>     149  </q-n></a>    apb_slave_interface # (DATA_SIZE, ADDR_SIZE)    apb_slave_interface (
<a name="150"><q-n>     150  </q-n></a>        .pclk_i             (pclk_i         )         ,   <q-m>//  clock</q-m>
<a name="151"><q-n>     151  </q-n></a>        .preset_ni          (preset_ni      )         ,   <q-m>//  reset signal is active-LOW</q-m>
<a name="152"><q-n>     152  </q-n></a>        .paddr_i            (paddr_i        )         ,   <q-m>//  address of APB slave and register map</q-m>
<a name="153"><q-n>     153  </q-n></a>        .pwrite_i           (pwrite_i       )         ,   <q-m>//  HIGH is write, LOW is read</q-m>
<a name="154"><q-n>     154  </q-n></a>        .psel_i             (psel_i         )         ,   <q-m>//  select slave interface</q-m>
<a name="155"><q-n>     155  </q-n></a>        .penable_i          (penable_i      )         ,   <q-m>//  Enable. PENABLE indicates the second and subsequent cycles of an APB transfer.</q-m>
<a name="156"><q-n>     156  </q-n></a>        .pwdata_i           (pwdata_i       )         ,   <q-m>//  data write</q-m>
<a name="157"><q-n>     157  </q-n></a>        .to_status_reg_i    (status         )         ,
<a name="158"><q-n>     158  </q-n></a>	    .data_fifo_i        (data_to_apb    )	      ,   <q-m>//  data from FIFO memory</q-m>
<a name="159"><q-n>     159  </q-n></a>
<a name="160"><q-n>     160  </q-n></a>        .prdata_o           (prdata_o       )         ,   <q-m>//  data read</q-m>
<a name="161"><q-n>     161  </q-n></a>        .pready_o           (pready_o       )         ,   <q-m>//  ready to receive data</q-m>
<a name="162"><q-n>     162  </q-n></a>        .reg_transmit_o     (data_from_apb  )         ,
<a name="163"><q-n>     163  </q-n></a>        .reg_slave_address_o(slave_address  )         ,
<a name="164"><q-n>     164  </q-n></a>        .reg_command_o      (command        )         ,
<a name="165"><q-n>     165  </q-n></a>        .reg_prescale_o     (prescale       )         ,
<a name="166"><q-n>     166  </q-n></a>        .start_done_i       (start_done     )         ,
<a name="167"><q-n>     167  </q-n></a>        .reset_done_i       (reset_done     )
<a name="168"><q-n>     168  </q-n></a>    );
<a name="169"><q-n>     169  </q-n></a><q-w>endmodule</q-w></pre>
</tt>

  
</body>
</html>
