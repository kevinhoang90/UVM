
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-w>module</q-w> apb_slave_interface  #(<q-w>parameter</q-w>     DATA_WIDTH  =   8,
<a name="2"><q-n>     2  </q-n></a>                              <q-w>parameter</q-w>     ADDR_WIDTH  =   8) 
<a name="3"><q-n>     3  </q-n></a>(
<a name="4"><q-n>     4  </q-n></a>    <q-w>input</q-w>                               pclk_i              ,   <q-m>//  clock</q-m>
<a name="5"><q-n>     5  </q-n></a>    <q-w>input</q-w>                               preset_ni           ,   <q-m>//  reset signal is active-LOW</q-m>
<a name="6"><q-n>     6  </q-n></a>    <q-w>input</q-w>   [ADDR_WIDTH - 1 : 0]        paddr_i             ,   <q-m>//  address of APB slave and register map</q-m>
<a name="7"><q-n>     7  </q-n></a>    <q-w>input</q-w>                               pwrite_i            ,   <q-m>//  HIGH is write, LOW is read</q-m>
<a name="8"><q-n>     8  </q-n></a>    <q-w>input</q-w>                               psel_i              ,   <q-m>//  select slave interface</q-m>
<a name="9"><q-n>     9  </q-n></a>    <q-w>input</q-w>                               penable_i           ,   <q-m>//  Enable. PENABLE indicates the second and subsequent cycles of an APB transfer.</q-m>
<a name="10"><q-n>     10  </q-n></a>    <q-w>input</q-w>   [DATA_WIDTH - 1 : 0]        pwdata_i            ,   <q-m>//  data write</q-m>
<a name="11"><q-n>     11  </q-n></a>    <q-w>input</q-w>   [7:0]                       to_status_reg_i     ,   <q-m>//  status of FIFO memory</q-m>
<a name="12"><q-n>     12  </q-n></a>    <q-w>input</q-w>   [7:0]                       data_fifo_i         ,   <q-m>//  data from FIFO memory</q-m>
<a name="13"><q-n>     13  </q-n></a>    <q-w>input</q-w>                               start_done_i        ,   <q-m>//  i2c-core done start, let turn off enable</q-m>
<a name="14"><q-n>     14  </q-n></a>    <q-w>input</q-w>                               reset_done_i        ,   <q-m>//  i2c-core done reset, let turn off reset</q-m>
<a name="15"><q-n>     15  </q-n></a>
<a name="16"><q-n>     16  </q-n></a>    <q-w>output</q-w>  [DATA_WIDTH - 1 : 0]        prdata_o            ,   <q-m>//  data read</q-m>
<a name="17"><q-n>     17  </q-n></a>    <q-w>output</q-w>                              pready_o            ,   <q-m>//  ready to receive data</q-m>
<a name="18"><q-n>     18  </q-n></a>    <q-w>output</q-w>     [7:0]                    reg_transmit_o      ,   <q-m>//  register</q-m>
<a name="19"><q-n>     19  </q-n></a>    <q-w>output</q-w>     [7:0]                    reg_slave_address_o ,   <q-m>//  register</q-m>
<a name="20"><q-n>     20  </q-n></a>    <q-w>output</q-w>     [7:0]                    reg_command_o       ,   <q-m>//  register</q-m>
<a name="21"><q-n>     21  </q-n></a>    <q-w>output</q-w>     [7:0]                    reg_prescale_o          <q-m>//  register</q-m>
<a name="22"><q-n>     22  </q-n></a>
<a name="23"><q-n>     23  </q-n></a>);
<a name="24"><q-n>     24  </q-n></a>
<a name="25"><q-n>     25  </q-n></a>    <q-m>// Decalar register map</q-m>
<a name="26"><q-n>     26  </q-n></a>    <q-w>reg</q-w>     [7:0]                       reg_transmit            ;   <q-m>//  0x00</q-m>
<a name="27"><q-n>     27  </q-n></a>    <q-w>reg</q-w>     [7:0]                       reg_slave_address       ;   <q-m>//  0x03</q-m>
<a name="28"><q-n>     28  </q-n></a>    <q-w>reg</q-w>     [7:0]                       reg_command             ;   <q-m>//  0x04</q-m>
<a name="29"><q-n>     29  </q-n></a>    <q-w>reg</q-w>     [7:0]                       reg_prescale            ;   <q-m>//  0x05</q-m>
<a name="30"><q-n>     30  </q-n></a>
<a name="31"><q-n>     31  </q-n></a>    <q-m>//  Decalar reg of output</q-m>
<a name="32"><q-n>     32  </q-n></a>    <q-w>reg</q-w>     [DATA_WIDTH - 1 : 0]        prdata              ;
<a name="33"><q-n>     33  </q-n></a>
<a name="34"><q-n>     34  </q-n></a>    <q-m>// Connect to Output</q-m>
<a name="35"><q-n>     35  </q-n></a>    <q-w>assign</q-w>      prdata_o                =   prdata              ;
<a name="36"><q-n>     36  </q-n></a>    <q-w>assign</q-w>      reg_transmit_o          =   reg_transmit        ;
<a name="37"><q-n>     37  </q-n></a>    <q-w>assign</q-w>      reg_slave_address_o     =   reg_slave_address   ; 
<a name="38"><q-n>     38  </q-n></a>    <q-w>assign</q-w>      reg_command_o           =   reg_command         ;
<a name="39"><q-n>     39  </q-n></a>    <q-w>assign</q-w>      reg_prescale_o          =   reg_prescale        ;
<a name="40"><q-n>     40  </q-n></a>	<q-w>assign</q-w> 		pready_o				=	psel_i ? 1 : 0		;
<a name="41"><q-n>     41  </q-n></a>
<a name="42"><q-n>     42  </q-n></a>    <q-m>//  Write transfer with no wait states</q-m>
<a name="43"><q-n>     43  </q-n></a>    <q-w>always</q-w> @(<q-a>posedge</q-w>    pclk_i,    <q-a>negedge</q-w>  preset_ni) <q-w>begin</q-w>
<a name="44"><q-n>     44  </q-n></a>
<a name="45"><q-n>     45  </q-n></a>        <q-w>if</q-w> (~preset_ni) <q-w>begin</q-w>
<a name="46"><q-n>     46  </q-n></a>
<a name="47"><q-n>     47  </q-n></a>            prdata                  &lt;=      0       ;
<a name="48"><q-n>     48  </q-n></a>            reg_transmit            &lt;=      0       ;
<a name="49"><q-n>     49  </q-n></a>            reg_slave_address       &lt;=      0       ;
<a name="50"><q-n>     50  </q-n></a>            reg_command             &lt;=      0       ;
<a name="51"><q-n>     51  </q-n></a>            reg_prescale            &lt;=      0       ;
<a name="52"><q-n>     52  </q-n></a>
<a name="53"><q-n>     53  </q-n></a>        <q-w>end</q-w> 
<a name="54"><q-n>     54  </q-n></a>
<a name="55"><q-n>     55  </q-n></a>        <q-w>else</q-w> <q-w>begin</q-w>
<a name="56"><q-n>     56  </q-n></a>			
<a name="57"><q-n>     57  </q-n></a>            <q-m>// pwrite HIGH and psel HIGHT, this is write cycle</q-m>
<a name="58"><q-n>     58  </q-n></a>            <q-w>if</q-w> ((psel_i == 1) &amp;&amp; (pwrite_i == 1) &amp;&amp; (penable_i == 1)) <q-w>begin</q-w>
<a name="59"><q-n>     59  </q-n></a>                
<a name="60"><q-n>     60  </q-n></a>                <q-w>case</q-w> (paddr_i)
<a name="61"><q-n>     61  </q-n></a>
<a name="62"><q-n>     62  </q-n></a>                    0       :	<q-w>begin</q-w>						<q-m>// When data into reg_transmit, enable write data to TX-FIFO</q-m>
<a name="63"><q-n>     63  </q-n></a>						reg_transmit    &lt;=  pwdata_i    ;
<a name="64"><q-n>     64  </q-n></a>						reg_command[3]	&lt;=	1			;
<a name="65"><q-n>     65  </q-n></a>					<q-w>end</q-w>
<a name="66"><q-n>     66  </q-n></a>
<a name="67"><q-n>     67  </q-n></a>                    3       :       reg_slave_address       &lt;=  pwdata_i    	;
<a name="68"><q-n>     68  </q-n></a>                    4       :       reg_command             &lt;=  pwdata_i        ;
<a name="69"><q-n>     69  </q-n></a>                    5       :       reg_prescale            &lt;=  pwdata_i    	; 
<a name="70"><q-n>     70  </q-n></a>                <q-w>endcase</q-w>
<a name="71"><q-n>     71  </q-n></a>            <q-w>end</q-w>
<a name="72"><q-n>     72  </q-n></a>            <q-w>else</q-w> <q-w>if</q-w> (reset_done_i) <q-w>begin</q-w>
<a name="73"><q-n>     73  </q-n></a>                reg_command[7]  &lt;=  1   ;
<a name="74"><q-n>     74  </q-n></a>            <q-w>end</q-w>
<a name="75"><q-n>     75  </q-n></a>            <q-w>else</q-w> <q-w>if</q-w> (start_done_i) <q-w>begin</q-w>
<a name="76"><q-n>     76  </q-n></a>                reg_command[6]  &lt;=  0   ;
<a name="77"><q-n>     77  </q-n></a>            <q-w>end</q-w>
<a name="78"><q-n>     78  </q-n></a>
<a name="79"><q-n>     79  </q-n></a>
<a name="80"><q-n>     80  </q-n></a>			<q-w>if</q-w> (reg_command[3] == 1) <q-w>begin</q-w>
<a name="81"><q-n>     81  </q-n></a>				reg_command[3]	&lt;=	0	; 
<a name="82"><q-n>     82  </q-n></a>			<q-w>end</q-w>
<a name="83"><q-n>     83  </q-n></a>            
<a name="84"><q-n>     84  </q-n></a>            <q-m>// pwrite Low and psel HIGHT, this is read cycle</q-m>
<a name="85"><q-n>     85  </q-n></a>            <q-w>if</q-w> ( (psel_i == 1) &amp;&amp; (pwrite_i == 0) &amp;&amp; (penable_i == 0) )<q-w>begin</q-w>
<a name="86"><q-n>     86  </q-n></a>                
<a name="87"><q-n>     87  </q-n></a>                <q-w>case</q-w> (paddr_i)
<a name="88"><q-n>     88  </q-n></a>
<a name="89"><q-n>     89  </q-n></a>                    0       :       prdata            &lt;=  reg_transmit      ;
<a name="90"><q-n>     90  </q-n></a>
<a name="91"><q-n>     91  </q-n></a>                    1       :       <q-w>begin</q-w>
<a name="92"><q-n>     92  </q-n></a>										prdata          &lt;=  data_fifo_i     ;
<a name="93"><q-n>     93  </q-n></a>										reg_command[0]	&lt;=	1				;	<q-m>// READ next byte of RX-FIFO</q-m>
<a name="94"><q-n>     94  </q-n></a>									<q-w>end</q-w>
<a name="95"><q-n>     95  </q-n></a>
<a name="96"><q-n>     96  </q-n></a>                    2       :       prdata            &lt;=  to_status_reg_i   ;
<a name="97"><q-n>     97  </q-n></a>                    3       :       prdata            &lt;=  reg_slave_address ;
<a name="98"><q-n>     98  </q-n></a>                    4       :       prdata            &lt;=  reg_command       ;
<a name="99"><q-n>     99  </q-n></a>                    5       :       prdata            &lt;=  reg_prescale      ;   
<a name="100"><q-n>     100  </q-n></a><q-m>//                    default :       prdata            &lt;=  0       	    ;</q-m>
<a name="101"><q-n>     101  </q-n></a>
<a name="102"><q-n>     102  </q-n></a>                <q-w>endcase</q-w>     
<a name="103"><q-n>     103  </q-n></a>            <q-w>end</q-w>
<a name="104"><q-n>     104  </q-n></a>
<a name="105"><q-n>     105  </q-n></a>			<q-m>// enable to read data from RX-FIFO only 1 cycle</q-m>
<a name="106"><q-n>     106  </q-n></a>			<q-w>if</q-w> (reg_command[0]	==	1) <q-w>begin</q-w>
<a name="107"><q-n>     107  </q-n></a>				reg_command[0] 	&lt;=	0	;
<a name="108"><q-n>     108  </q-n></a>			<q-w>end</q-w>
<a name="109"><q-n>     109  </q-n></a>
<a name="110"><q-n>     110  </q-n></a>        <q-w>end</q-w>
<a name="111"><q-n>     111  </q-n></a>
<a name="112"><q-n>     112  </q-n></a>    <q-w>end</q-w>
<a name="113"><q-n>     113  </q-n></a>
<a name="114"><q-n>     114  </q-n></a><q-w>endmodule</q-w></pre>
</tt>

  
</body>
</html>
