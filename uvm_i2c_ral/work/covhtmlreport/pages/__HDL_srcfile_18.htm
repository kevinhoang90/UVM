
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a>
<a name="2"><q-n>     2  </q-n></a>`ifndef TOP
<a name="3"><q-n>     3  </q-n></a>`<q-a>define</q-w> TOP
<a name="4"><q-n>     4  </q-n></a>`<q-a>timescale</q-w> 1<q-v>ns</q-w>/1<q-v>ns</q-w>
<a name="5"><q-n>     5  </q-n></a>
<a name="6"><q-n>     6  </q-n></a><q-w>import</q-w> uvm_pkg::*;
<a name="7"><q-n>     7  </q-n></a>`<q-i>include</q-w> <q-l>"uvm_macros.svh"</q-l>
<a name="8"><q-n>     8  </q-n></a>
<a name="9"><q-n>     9  </q-n></a>
<a name="10"><q-n>     10  </q-n></a><q-m>//--------------------------------------------------------</q-m>
<a name="11"><q-n>     11  </q-n></a><q-m>//Include Files</q-m>
<a name="12"><q-n>     12  </q-n></a><q-m>//--------------------------------------------------------</q-m>
<a name="13"><q-n>     13  </q-n></a>`<q-i>include</q-w> <q-l>"interface.sv"</q-l>
<a name="14"><q-n>     14  </q-n></a>`<q-i>include</q-w> <q-l>"sequence_item.sv"</q-l>
<a name="15"><q-n>     15  </q-n></a>`<q-i>include</q-w> <q-l>"reg_sequence.sv"</q-l>
<a name="16"><q-n>     16  </q-n></a>`<q-i>include</q-w> <q-l>"sequencer.sv"</q-l>
<a name="17"><q-n>     17  </q-n></a>`<q-i>include</q-w> <q-l>"reg_model.sv"</q-l>
<a name="18"><q-n>     18  </q-n></a>`<q-i>include</q-w> <q-l>"reg_adapter.sv"</q-l>
<a name="19"><q-n>     19  </q-n></a>`<q-i>include</q-w> <q-l>"driver.sv"</q-l>
<a name="20"><q-n>     20  </q-n></a>`<q-i>include</q-w> <q-l>"monitor.sv"</q-l>
<a name="21"><q-n>     21  </q-n></a>`<q-i>include</q-w> <q-l>"agent.sv"</q-l>
<a name="22"><q-n>     22  </q-n></a>`<q-i>include</q-w> <q-l>"scoreboard.sv"</q-l>
<a name="23"><q-n>     23  </q-n></a>`<q-i>include</q-w> <q-l>"env.sv"</q-l>
<a name="24"><q-n>     24  </q-n></a>`<q-i>include</q-w> <q-l>"test_case.sv"</q-l>
<a name="25"><q-n>     25  </q-n></a>`<q-i>include</q-w> <q-l>"subscriber.sv"</q-l>
<a name="26"><q-n>     26  </q-n></a>
<a name="27"><q-n>     27  </q-n></a><q-w>module</q-w> top;
<a name="28"><q-n>     28  </q-n></a>
<a name="29"><q-n>     29  </q-n></a>  <q-w>logic</q-w> pclk;
<a name="30"><q-n>     30  </q-n></a>  <q-w>logic</q-w> i2c_core_clk;
<a name="31"><q-n>     31  </q-n></a>  <q-w>logic</q-w> reset;
<a name="32"><q-n>     32  </q-n></a>  intf intf(
<a name="33"><q-n>     33  </q-n></a>    .i2c_core_clk(i2c_core_clk),
<a name="34"><q-n>     34  </q-n></a>    .pclk(pclk)
<a name="35"><q-n>     35  </q-n></a>  );
<a name="36"><q-n>     36  </q-n></a>
<a name="37"><q-n>     37  </q-n></a>  i2c_top dut(
<a name="38"><q-n>     38  </q-n></a>    .i2c_core_clk_i(intf.i2c_core_clk),
<a name="39"><q-n>     39  </q-n></a>    .pclk_i(intf.pclk),
<a name="40"><q-n>     40  </q-n></a>    .preset_ni(intf.preset),
<a name="41"><q-n>     41  </q-n></a>    .paddr_i(intf.paddr),
<a name="42"><q-n>     42  </q-n></a>    .pwrite_i(intf.pwrite),
<a name="43"><q-n>     43  </q-n></a>    .psel_i(intf.psel),
<a name="44"><q-n>     44  </q-n></a>    .penable_i(intf.penable),
<a name="45"><q-n>     45  </q-n></a>    .pwdata_i(intf.pwdata),
<a name="46"><q-n>     46  </q-n></a>    .prdata_o(intf.prdata),
<a name="47"><q-n>     47  </q-n></a>    .pready_o(intf.pready),
<a name="48"><q-n>     48  </q-n></a>    .reset(reset),
<a name="49"><q-n>     49  </q-n></a>    .sda(intf.sda),
<a name="50"><q-n>     50  </q-n></a>    .scl(intf.scl)
<a name="51"><q-n>     51  </q-n></a>  );
<a name="52"><q-n>     52  </q-n></a>
<a name="53"><q-n>     53  </q-n></a>  i2c_slave_model slave(
<a name="54"><q-n>     54  </q-n></a>    .sda(intf.sda),
<a name="55"><q-n>     55  </q-n></a>    .scl(intf.scl),
<a name="56"><q-n>     56  </q-n></a>    .start(intf.start),
<a name="57"><q-n>     57  </q-n></a>    .stop(intf.stop),
<a name="58"><q-n>     58  </q-n></a>    .reset(reset),
<a name="59"><q-n>     59  </q-n></a>    .data_slave_read(intf.data_slave_read),
<a name="60"><q-n>     60  </q-n></a>    .data_slave_read_valid(intf.data_slave_read_valid)
<a name="61"><q-n>     61  </q-n></a>  );
<a name="62"><q-n>     62  </q-n></a>
<a name="63"><q-n>     63  </q-n></a>  <q-w>initial</q-w> <q-w>begin</q-w>
<a name="64"><q-n>     64  </q-n></a>    uvm_config_db #(<q-w>virtual</q-w> intf)::set(<q-w>null</q-w>, <q-l>"*"</q-l>, <q-l>"intf"</q-l>, intf );
<a name="65"><q-n>     65  </q-n></a>  <q-w>end</q-w>
<a name="66"><q-n>     66  </q-n></a>
<a name="67"><q-n>     67  </q-n></a>
<a name="68"><q-n>     68  </q-n></a>  <q-w>initial</q-w> <q-w>begin</q-w>
<a name="69"><q-n>     69  </q-n></a>    run_test(<q-l>"test"</q-l>);
<a name="70"><q-n>     70  </q-n></a>  <q-w>end</q-w>
<a name="71"><q-n>     71  </q-n></a>
<a name="72"><q-n>     72  </q-n></a>  <q-w>initial</q-w> <q-w>begin</q-w>
<a name="73"><q-n>     73  </q-n></a>    i2c_core_clk = 0;
<a name="74"><q-n>     74  </q-n></a>    pclk = 0;
<a name="75"><q-n>     75  </q-n></a>  <q-w>end</q-w>
<a name="76"><q-n>     76  </q-n></a>
<a name="77"><q-n>     77  </q-n></a>  <q-w>always</q-w> #10 i2c_core_clk = ~i2c_core_clk;
<a name="78"><q-n>     78  </q-n></a>  <q-w>always</q-w> #5 pclk = ~pclk;
<a name="79"><q-n>     79  </q-n></a><q-w>endmodule</q-w>: top
<a name="80"><q-n>     80  </q-n></a>`<q-a>endif</q-w></pre>
</tt>

  
</body>
</html>
