
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a>
<a name="2"><q-n>     2  </q-n></a><q-m>// Write pointer and full logic</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>// The n-bit pointer ( wptr ) is passed to the read clock domain through the sync_w2r module. </q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>// The (n-1)-bit pointer ( waddr ) is used to address the FIFO buffer.</q-m>
<a name="5"><q-n>     5  </q-n></a>
<a name="6"><q-n>     6  </q-n></a><q-w>module</q-w> wptr_full	#(<q-w>parameter</q-w>	ADDRSIZE = 4)
<a name="7"><q-n>     7  </q-n></a>(
<a name="8"><q-n>     8  </q-n></a>	<q-w>input</q-w>		[ADDRSIZE : 0]		wq2_rptr_i	, <q-m>// The pointer synchronized from read-domain to write-domain</q-m>
<a name="9"><q-n>     9  </q-n></a>	<q-w>input</q-w>							winc_i		, <q-m>// Write increase how many cells</q-m>
<a name="10"><q-n>     10  </q-n></a>	<q-w>input</q-w>							wclk_i		, <q-m>// The clock of write-domain</q-m>
<a name="11"><q-n>     11  </q-n></a>	<q-w>input</q-w>							wrst_ni		, <q-m>// The negative reset signal of write-domain</q-m>
<a name="12"><q-n>     12  </q-n></a>	<q-w>output</q-w>							wfull_o		, <q-m>// Output is the buffer is full, can not write</q-m>
<a name="13"><q-n>     13  </q-n></a>	<q-w>output</q-w>		[ADDRSIZE : 0]		wptr_o		, <q-m>// The gray-pointer of write-domain used for synchronization to read-domain</q-m>
<a name="14"><q-n>     14  </q-n></a>	<q-w>output</q-w>		[ADDRSIZE - 1 : 0]	waddr_o	  	, <q-m>// The address used write data to FIFO memory</q-m>
<a name="15"><q-n>     15  </q-n></a>	<q-w>output</q-w>							w_almost_full_o 	<q-m>// Almost full</q-m>
<a name="16"><q-n>     16  </q-n></a>);
<a name="17"><q-n>     17  </q-n></a>
<a name="18"><q-n>     18  </q-n></a>	<q-m>// Decalar reg of output</q-m>
<a name="19"><q-n>     19  </q-n></a>	<q-w>reg</q-w>							wfull		    	;
<a name="20"><q-n>     20  </q-n></a>	<q-w>reg</q-w>		[ADDRSIZE : 0]		wptr				;
<a name="21"><q-n>     21  </q-n></a>	<q-w>reg</q-w>		[ADDRSIZE - 1 : 0]	waddr  				;
<a name="22"><q-n>     22  </q-n></a>	<q-w>reg</q-w>							w_almost_full		;
<a name="23"><q-n>     23  </q-n></a>
<a name="24"><q-n>     24  </q-n></a>	<q-m>// Decalar pointer</q-m>
<a name="25"><q-n>     25  </q-n></a>	<q-w>reg</q-w>		[ADDRSIZE : 0]	wbin		; <q-m>// binary write-pointer</q-m>
<a name="26"><q-n>     26  </q-n></a>	<q-w>wire</q-w>	[ADDRSIZE : 0]	wbinnext	; <q-m>// binary write-pointer where the next address is to be write</q-m>
<a name="27"><q-n>     27  </q-n></a>	<q-w>wire</q-w>	[ADDRSIZE : 0]	wgraynext	; <q-m>// gray   write-pointer where the next address is to be write</q-m>
<a name="28"><q-n>     28  </q-n></a>	<q-w>wire</q-w>	[ADDRSIZE : 0]	wgraynextp1	; <q-m>// gray   write-pointer converted from (wbinnext + 1)</q-m>
<a name="29"><q-n>     29  </q-n></a>
<a name="30"><q-n>     30  </q-n></a>	<q-m>// Connect reg to output</q-m>
<a name="31"><q-n>     31  </q-n></a>	<q-w>assign</q-w>		wfull_o		=		wfull			;
<a name="32"><q-n>     32  </q-n></a>	<q-w>assign</q-w>		wptr_o		=		wptr			;
<a name="33"><q-n>     33  </q-n></a>	<q-w>assign</q-w>		waddr_o		=		waddr			;
<a name="34"><q-n>     34  </q-n></a>	<q-w>assign</q-w>		w_almost_full_o	=	w_almost_full	;
<a name="35"><q-n>     35  </q-n></a>
<a name="36"><q-n>     36  </q-n></a>	<q-m>// memory write-address pointer</q-m>
<a name="37"><q-n>     37  </q-n></a>	<q-w>always</q-w>	@ (*)
<a name="38"><q-n>     38  </q-n></a>	<q-w>begin</q-w>
<a name="39"><q-n>     39  </q-n></a>
<a name="40"><q-n>     40  </q-n></a>		waddr	  =		wbin[ADDRSIZE - 1 : 0]		;
<a name="41"><q-n>     41  </q-n></a>
<a name="42"><q-n>     42  </q-n></a>	<q-w>end</q-w>
<a name="43"><q-n>     43  </q-n></a>
<a name="44"><q-n>     44  </q-n></a>	<q-m>// Caculator write binary next pointer = write binary + increment if FIFO buffer not full</q-m>
<a name="45"><q-n>     45  </q-n></a>	<q-w>assign</q-w>	wbinnext  =		wbin + (winc_i &amp; ~wfull)	;
<a name="46"><q-n>     46  </q-n></a>
<a name="47"><q-n>     47  </q-n></a>	<q-m>// Convert binary to gray</q-m>
<a name="48"><q-n>     48  </q-n></a>	<q-w>assign</q-w>	wgraynext =		(wbinnext &gt;&gt; 1) ^ wbinnext	;
<a name="49"><q-n>     49  </q-n></a>
<a name="50"><q-n>     50  </q-n></a>	<q-m>// Almost full if wptr-binary + 1 = synchrosized rptr</q-m>
<a name="51"><q-n>     51  </q-n></a>	<q-w>assign</q-w>	wgraynextp1	=	((wbinnext + 1) &gt;&gt; 1) ^ (wbinnext + 1)	;
<a name="52"><q-n>     52  </q-n></a>
<a name="53"><q-n>     53  </q-n></a>	<q-m>// gray pointer and binary pointer of write-domain</q-m>
<a name="54"><q-n>     54  </q-n></a>	<q-w>always</q-w>	@ (<q-a>posedge</q-w> wclk_i,	<q-a>negedge</q-w> wrst_ni)
<a name="55"><q-n>     55  </q-n></a>	<q-w>begin</q-w>
<a name="56"><q-n>     56  </q-n></a>		
<a name="57"><q-n>     57  </q-n></a>		<q-w>if</q-w> (~wrst_ni)
<a name="58"><q-n>     58  </q-n></a>			{wptr, wbin}	&lt;=	0						;
<a name="59"><q-n>     59  </q-n></a>		<q-w>else</q-w>
<a name="60"><q-n>     60  </q-n></a>			{wptr, wbin}	&lt;=	{wgraynext, wbinnext}	;
<a name="61"><q-n>     61  </q-n></a>
<a name="62"><q-n>     62  </q-n></a>	<q-w>end</q-w>
<a name="63"><q-n>     63  </q-n></a>
<a name="64"><q-n>     64  </q-n></a>	<q-m>//------------------------------------------------------------------</q-m>
<a name="65"><q-n>     65  </q-n></a> 	<q-m>// FIFO full if 2 MSB bit of write gray next != synchronized rptr and other ==</q-m>
<a name="66"><q-n>     66  </q-n></a> 	<q-m>// assign wfull_val=((wgnext[ADDRSIZE] !=wq2_rptr[ADDRSIZE] )    &amp;&amp;</q-m>
<a name="67"><q-n>     67  </q-n></a> 	<q-m>// 					 (wgnext[ADDRSIZE-1] !=wq2_rptr[ADDRSIZE-1]) &amp;&amp;</q-m>
<a name="68"><q-n>     68  </q-n></a> 	<q-m>// 					 (wgnext[ADDRSIZE-2:0]==wq2_rptr[ADDRSIZE-2:0]));</q-m>
<a name="69"><q-n>     69  </q-n></a> 	<q-m>//------------------------------------------------------------------</q-m>
<a name="70"><q-n>     70  </q-n></a>
<a name="71"><q-n>     71  </q-n></a>	<q-w>assign</q-w>	wfull_val			=	(wq2_rptr_i == { ~wgraynext[ADDRSIZE : ADDRSIZE - 1], 
<a name="72"><q-n>     72  </q-n></a>											  		  wgraynext[ADDRSIZE - 2 : 0]		});
<a name="73"><q-n>     73  </q-n></a>		
<a name="74"><q-n>     74  </q-n></a>	<q-w>assign</q-w>	w_almost_full_val	=	(wq2_rptr_i == { ~wgraynextp1[ADDRSIZE : ADDRSIZE - 1], 
<a name="75"><q-n>     75  </q-n></a>											  		  wgraynextp1[ADDRSIZE - 2 : 0]		});
<a name="76"><q-n>     76  </q-n></a>
<a name="77"><q-n>     77  </q-n></a>	<q-m>// Logic wfull</q-m>
<a name="78"><q-n>     78  </q-n></a>	<q-w>always</q-w>	@ (<q-a>posedge</q-w> wclk_i,	<q-a>negedge</q-w> wrst_ni)
<a name="79"><q-n>     79  </q-n></a>	<q-w>begin</q-w>
<a name="80"><q-n>     80  </q-n></a>	
<a name="81"><q-n>     81  </q-n></a>		<q-w>if</q-w>	(~wrst_ni)
<a name="82"><q-n>     82  </q-n></a>		<q-w>begin</q-w>
<a name="83"><q-n>     83  </q-n></a>			wfull				&lt;=	1'b0		;
<a name="84"><q-n>     84  </q-n></a>			w_almost_full		&lt;=	1'b0		;
<a name="85"><q-n>     85  </q-n></a>		<q-w>end</q-w>
<a name="86"><q-n>     86  </q-n></a>
<a name="87"><q-n>     87  </q-n></a>		<q-w>else</q-w>
<a name="88"><q-n>     88  </q-n></a>		<q-w>begin</q-w>
<a name="89"><q-n>     89  </q-n></a>			wfull				&lt;=	wfull_val			;
<a name="90"><q-n>     90  </q-n></a>			w_almost_full		&lt;=	w_almost_full_val	;
<a name="91"><q-n>     91  </q-n></a>		<q-w>end</q-w>
<a name="92"><q-n>     92  </q-n></a>
<a name="93"><q-n>     93  </q-n></a>	<q-w>end</q-w>
<a name="94"><q-n>     94  </q-n></a>
<a name="95"><q-n>     95  </q-n></a><q-w>endmodule</q-w>
</pre>
</tt>

  
</body>
</html>
