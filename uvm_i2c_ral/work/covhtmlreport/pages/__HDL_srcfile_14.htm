
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-w>module</q-w> data_fifo_mem # (<q-w>parameter</q-w>	DATASIZE	=	8,
<a name="2"><q-n>     2  </q-n></a>					    <q-w>parameter</q-w>	ADDRSIZE	=	4)
<a name="3"><q-n>     3  </q-n></a>(
<a name="4"><q-n>     4  </q-n></a>    <q-w>input</q-w>                   pclk_i              ,   <q-m>// APB clock</q-m>
<a name="5"><q-n>     5  </q-n></a>    <q-w>input</q-w>                   i2c_core_clk_i      ,   <q-m>// i2c clock core</q-m>
<a name="6"><q-n>     6  </q-n></a>    <q-w>input</q-w>   [7:0]           command_i           ,   <q-m>// command from MCU include: enable, repeat_start, reset, r/w, winc, rinc</q-m>
<a name="7"><q-n>     7  </q-n></a>    <q-w>input</q-w>   [7:0]           data_from_apb_i     ,   <q-m>// data from apb transfer to TX-FIFO</q-m>
<a name="8"><q-n>     8  </q-n></a>    <q-w>input</q-w>   [7:0]           data_from_sda_i     ,   <q-m>// data from sda transfer to RX-FIFO</q-m>
<a name="9"><q-n>     9  </q-n></a>    <q-w>input</q-w>                   r_tx_fifo_en_i      ,   <q-m>// enable read data from TX-FIFO</q-m>
<a name="10"><q-n>     10  </q-n></a>    <q-w>input</q-w>                   w_rx_fifo_en_i      ,   <q-m>// enable write data to RX-FIFO</q-m>
<a name="11"><q-n>     11  </q-n></a>
<a name="12"><q-n>     12  </q-n></a>    <q-w>output</q-w>  [7:0]           data_to_apb_o       ,   <q-m>// data receive from sda, which transfer to apb interface</q-m>
<a name="13"><q-n>     13  </q-n></a>    <q-w>output</q-w>  [7:0]           data_to_sda_o       ,   <q-m>// data which receive from apb and then transfer to data_path</q-m>
<a name="14"><q-n>     14  </q-n></a>    <q-w>output</q-w>  [7:0]           status_o                <q-m>// full, empty status of TX and RX memory</q-m>
<a name="15"><q-n>     15  </q-n></a>    <q-m>// output                  tx_full_o           ,   // TX-mem is full</q-m>
<a name="16"><q-n>     16  </q-n></a>    <q-m>// output                  tx_empty_o          ,   // Tx-memory is empty</q-m>
<a name="17"><q-n>     17  </q-n></a>    <q-m>// output                  rx_full_o           ,   // RX-memory is full</q-m>
<a name="18"><q-n>     18  </q-n></a>    <q-m>// output                  rx_empty_o              // RX-memory is empty</q-m>
<a name="19"><q-n>     19  </q-n></a>);
<a name="20"><q-n>     20  </q-n></a>
<a name="21"><q-n>     21  </q-n></a>    <q-m>// Decalar reg of output</q-m>
<a name="22"><q-n>     22  </q-n></a>    <q-w>reg</q-w>     [7:0]           data_to_apb         ;
<a name="23"><q-n>     23  </q-n></a>    <q-w>reg</q-w>     [7:0]           data_to_sda         ;
<a name="24"><q-n>     24  </q-n></a>    <q-w>wire</q-w>     [7:0]           status              ;
<a name="25"><q-n>     25  </q-n></a>
<a name="26"><q-n>     26  </q-n></a>    <q-m>// Connect reg to output</q-m>
<a name="27"><q-n>     27  </q-n></a>    <q-m>//assign      data_to_apb_o   =   data_to_apb ;</q-m>
<a name="28"><q-n>     28  </q-n></a>    <q-m>//assign      data_to_sda_o   =   data_to_sda ;     </q-m>
<a name="29"><q-n>     29  </q-n></a>    <q-w>assign</q-w>      status_o        =   status      ;
<a name="30"><q-n>     30  </q-n></a>
<a name="31"><q-n>     31  </q-n></a>    <q-w>assign</q-w>      tx_rinc         =   r_tx_fifo_en_i      ;
<a name="32"><q-n>     32  </q-n></a>    <q-w>assign</q-w>      rx_winc         =   w_rx_fifo_en_i      ;
<a name="33"><q-n>     33  </q-n></a>
<a name="34"><q-n>     34  </q-n></a>    <q-m>// Instance</q-m>
<a name="35"><q-n>     35  </q-n></a>    fifo_toplevel_tx        TX_fifo
<a name="36"><q-n>     36  </q-n></a>    (
<a name="37"><q-n>     37  </q-n></a>	    .wdata_i            (data_from_apb_i    )			, <q-m>// data which write to FIFO buffer</q-m>
<a name="38"><q-n>     38  </q-n></a>
<a name="39"><q-n>     39  </q-n></a>	    .winc_i             (command_i[3]       )			, <q-m>// write increase how many cells</q-m>
<a name="40"><q-n>     40  </q-n></a>	    .wclk_i             (pclk_i             )			, <q-m>// The clock of write-domain</q-m>
<a name="41"><q-n>     41  </q-n></a>	    .wrst_ni            (command_i[7]       )			, <q-m>// The negative reset signal of write-domain</q-m>
<a name="42"><q-n>     42  </q-n></a>
<a name="43"><q-n>     43  </q-n></a>	    .rinc_i             (tx_rinc            )			, <q-m>// read increase how many cells</q-m>
<a name="44"><q-n>     44  </q-n></a>	    .rclk_i             (i2c_core_clk_i     )			, <q-m>// The clock of read-domain</q-m>
<a name="45"><q-n>     45  </q-n></a>	    .rrst_ni            (command_i[7]       )			, <q-m>// The negative reset signal of read-domain</q-m>
<a name="46"><q-n>     46  </q-n></a>
<a name="47"><q-n>     47  </q-n></a>	    .rdata_o            (data_to_sda_o      )			, <q-m>// Data which read from FIFO buffer</q-m>
<a name="48"><q-n>     48  </q-n></a>	    .rempty_o           (status[7]          )		    , <q-m>// State of FIFO buffer is empty</q-m>
<a name="49"><q-n>     49  </q-n></a>	    .wfull_o            (status[6]          )			, <q-m>// State of FIFO buffer is full</q-m>
<a name="50"><q-n>     50  </q-n></a>	    .r_almost_empty_o   (status[5]          )           , <q-m>// almost empty</q-m>
<a name="51"><q-n>     51  </q-n></a>	    .w_almost_full_o    (status[4]          )		      <q-m>// almost full</q-m>
<a name="52"><q-n>     52  </q-n></a>
<a name="53"><q-n>     53  </q-n></a>);
<a name="54"><q-n>     54  </q-n></a>
<a name="55"><q-n>     55  </q-n></a>
<a name="56"><q-n>     56  </q-n></a>    fifo_toplevel_rx        RX_fifo
<a name="57"><q-n>     57  </q-n></a>    (
<a name="58"><q-n>     58  </q-n></a>	    .wdata_i            (data_from_sda_i    )			, <q-m>// data which write to FIFO buffer</q-m>
<a name="59"><q-n>     59  </q-n></a>
<a name="60"><q-n>     60  </q-n></a>	    .winc_i             (rx_winc            )			, <q-m>// write increase how many cells</q-m>
<a name="61"><q-n>     61  </q-n></a>	    .wclk_i             (i2c_core_clk_i     )			, <q-m>// The clock of write-domain</q-m>
<a name="62"><q-n>     62  </q-n></a>	    .wrst_ni            (command_i[7]       )			, <q-m>// The negative reset signal of write-domain</q-m>
<a name="63"><q-n>     63  </q-n></a>
<a name="64"><q-n>     64  </q-n></a>	    .rinc_i             (command_i[0]       )			, <q-m>// read increase how many cells</q-m>
<a name="65"><q-n>     65  </q-n></a>	    .rclk_i             (pclk_i             )			, <q-m>// The clock of read-domain</q-m>
<a name="66"><q-n>     66  </q-n></a>	    .rrst_ni            (command_i[7]       )			, <q-m>// The negative reset signal of read-domain</q-m>
<a name="67"><q-n>     67  </q-n></a>
<a name="68"><q-n>     68  </q-n></a>	    .rdata_o            (data_to_apb_o      )			, <q-m>// Data which read from FIFO buffer</q-m>
<a name="69"><q-n>     69  </q-n></a>	    .rempty_o           (status[3]          )		    , <q-m>// State of FIFO buffer is empty</q-m>
<a name="70"><q-n>     70  </q-n></a>	    .wfull_o            (status[2]          )			, <q-m>// State of FIFO buffer is full</q-m>
<a name="71"><q-n>     71  </q-n></a>	    .r_almost_empty_o   (status[1]          )           , <q-m>// almost empty</q-m>
<a name="72"><q-n>     72  </q-n></a>	    .w_almost_full_o    (status[0]          )		      <q-m>// almost full</q-m>
<a name="73"><q-n>     73  </q-n></a>
<a name="74"><q-n>     74  </q-n></a>);
<a name="75"><q-n>     75  </q-n></a>
<a name="76"><q-n>     76  </q-n></a>
<a name="77"><q-n>     77  </q-n></a><q-w>endmodule</q-w></pre>
</tt>

  
</body>
</html>
